\use-plugin{booklitdoc}
\use-plugin{chroma}

\title{\aux{The }HTML Renderer}{html-renderer}

The presentation of your content is controlled by a \italic{renderer}. At
present, there is only one, and it's probably the one you'll want to use: HTML,
for generating static websites.

Booklit comes with some extremely barebones templates that don't include any
styling at all. You'll probably want to change that.

The HTML renderer uses Go's built-in
\link{\code{html/template}}{https://golang.org/pkg/html/template} package. To
override templates, first create a directory for your \code{.tmpl} files, and
then provide the \code{--html-templates} flag when building your docs:

\syntax{bash}{{{
booklit -i ./index.any -o ./docs --html-templates ./html
}}}

\table-of-contents

\section{
  \title{Base Templates}

  The following template files will be executed if present under \code{./html},
  with the corresponding data type as \code{.}:

  \table{
    \table-row{template}{type for \code{.}}
  }{
    \table-row{\code{page.tmpl}}{\godoc{*booklit.Section}}
  }{
    \table-row{\code{section.tmpl}}{\godoc{*booklit.Section}}
  }{
    \table-row{\code{link.tmpl}}{\godoc{booklit.Link}}
  }{
    \table-row{\code{list.tmpl}}{\godoc{booklit.List}}
  }{
    \table-row{\code{paragraph.tmpl}}{\godoc{booklit.Paragraph}}
  }{
    \table-row{\code{preformatted.tmpl}}{\godoc{booklit.Preformatted}}
  }{
    \table-row{\code{reference.tmpl}}{\godoc{*booklit.Reference}}
  }{
    \table-row{\code{sequence.tmpl}}{\godoc{booklit.Sequence}}
  }{
    \table-row{\code{string.tmpl}}{\godoc{booklit.String}}
  }{
    \table-row{\code{target.tmpl}}{\godoc{booklit.Target}}
  }{
    \table-row{\code{toc.tmpl}}{\godoc{*booklit.Section}}
  }{
    \table-row{\code{aside.tmpl}}{\godoc{booklit.Aside}}
  }{
    \table-row{\code{definitions.tmpl}}{\godoc{booklit.Definitions}}
  }{
    \table-row{\code{table.tmpl}}{\godoc{booklit.Table}}
  }{
    \table-row{\code{image.tmpl}}{\godoc{booklit.Image}}
  }

  The most impactful of these is \code{page.tmpl}, which is used for the
  top-level section for each "page" rendered. This is where you would place
  assets in \code{<head>}, for example.
}

\section{
  \title{Template Functions}

  Booklit executes templates with the following functions available:

  \definitions{
    \definition{\code{\{\{tag | url\}\}}}{
      generate a URL for the tag
    }
  }{
    \definition{\code{\{\{content | stripAux\}\}}}{
      strip \reference{aux} elements from the content
    }
  }{
    \definition{\code{\{\{string | rawHTML\}\}}}{
      render the string as raw HTML, unescaped
    }
  }{
    \definition{\code{\{\{content | render\}\}}}{
      render the content
    }
  }{
    \definition{\code{\{\{walkContext currentSection subSection\}\}}}{
      generate a convenience struct with fields \code{.Current} and
      \code{.Section}, useful for traversing a tree of sections while retaining
      the "current" section, e.g. so it can be marked as "active" in a
      navigation tree
    }
  }{
    \definition{\code{\{\{section | headerDepth\}\}}}{
      return the number that should be used for the section's header, i.e.
      \code{<hN>}
    }
  }
}

\section{
  \title{Styled Content}

  Styled content, i.e. \godoc{booklit.Styled}, instructs the HTML renderer to
  use the \code{*.tmpl} template named after the style.

  For example, \reference{bold} is implemented in the
  \reference{baselit}{\code{baselit}} plugin by returning:

  \syntax{go}{{{
    booklit.Styled{
      Style:   booklit.StyleBold, // "bold"
      Content: content,
    }
  }}}

  Booklit includes a \code{bold.tmpl} template which is evaluated with \code{.}
  as the \code{booklit.Styled} value:

  \syntax{go-html-template}{{{
  <strong>{{.Content | render}}</strong>
  }}}

  Thus, when content is styled with \code{"bold"}, it will render in
  \bold{strong tags}.

  \section{
    \title{Styles with Partials}

    Additional content can be propagated to the template by setting it
    \code{Partials}:

    \syntax{go}{{{
      booklit.Styled{
        Style:   "my-wackadoo-style",
        Content: content,

        Partials: booklit.Partials{
          "Title": title,
        },
      }
    }}}

    Then, with \code{my-wackadoo-style.tmpl} as the following:

    \syntax{go-html-template}{{{
    <div class="wack">
      <h1>{{.Partial "Title" | render}}</h1>

      {{.Content | render}}
    </div>
    }}}

    This would result with \code{title} rendered in between the \code{<h1>}
    tags, and \code{content} rendered below.
  }
}

\section{
  \title{Styled Sections}

  Using \reference{styled} instructs the HTML renderer to use
  \code{(name).tmpl} instead of \code{section.tmpl}, or \code{(name)-page.tmpl}
  instead of \code{page.tmpl} (if it exists).

  So, given the following example:

  \lit-syntax{{{
  \title{Fancy Section}

  \styled{fancy}

  I'm a fancy section!

  \section{
    \title{Sub-section}

    I'm a normal sub-section!
  }
  }}}

  ...and the following as \code{fancy.tmpl} under the given templates path
  (\code{--html-templates}):

  \syntax{go-html-template}{{{
  <div class="fancy">
    <em><strong>{{.Title | render}}</strong></em>

    {{.Body | render}}

    {{if not .SplitSections}}
      {{range .Children}}
        {{. | render}}
      {{end}}
    {{end}}
  </div>
  }}}

  ...the following will be the rendered HTML for the section:

  \syntax{html}{{{
  <div class="fancy">
    <em><strong>Fancy Section</strong></em>

    <p>I'm a fancy section!</p>

    <h2>Sub-section</h2>

    <p>I'm a normal sub-section!</p>
  </div>
  }}}

  Note that the styling only applies to the section that declares it; it does
  not propagate to its children.
}
