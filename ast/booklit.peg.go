// Code generated by pigeon; DO NOT EDIT.

package ast

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func ifaceStr(val interface{}) string {
	str := ""
	for _, seg := range val.([]interface{}) {
		str = str + string(seg.([]byte))
	}

	return str
}

func ifaceSequences(val interface{}) []Sequence {
	seq := []Sequence{}
	for _, node := range val.([]interface{}) {
		seq = append(seq, node.(Sequence))
	}

	return seq
}

func ifaceNodes(val interface{}) []Node {
	nodes := []Node{}
	for _, node := range val.([]interface{}) {
		nodes = append(nodes, node.(Node))
	}

	return nodes
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Booklit",
			pos:  position{line: 34, col: 1, offset: 581},
			expr: &actionExpr{
				pos: position{line: 34, col: 12, offset: 592},
				run: (*parser).callonBooklit1,
				expr: &seqExpr{
					pos: position{line: 34, col: 12, offset: 592},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 34, col: 12, offset: 592},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 17, offset: 597},
								name: "Paragraphs",
							},
						},
						&notExpr{
							pos: position{line: 34, col: 28, offset: 608},
							expr: &anyMatcher{
								line: 34, col: 29, offset: 609,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineCode",
			pos:  position{line: 38, col: 1, offset: 635},
			expr: &actionExpr{
				pos: position{line: 38, col: 15, offset: 649},
				run: (*parser).callonInlineCode1,
				expr: &seqExpr{
					pos: position{line: 38, col: 15, offset: 649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 38, col: 15, offset: 649},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 38, col: 19, offset: 653},
							label: "node",
							expr: &actionExpr{
								pos: position{line: 38, col: 25, offset: 659},
								run: (*parser).callonInlineCode5,
								expr: &oneOrMoreExpr{
									pos: position{line: 38, col: 25, offset: 659},
									expr: &charClassMatcher{
										pos:        position{line: 38, col: 25, offset: 659},
										val:        "[^`]",
										chars:      []rune{'`'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 38, col: 63, offset: 697},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "StarItalic",
			pos:  position{line: 51, col: 1, offset: 901},
			expr: &actionExpr{
				pos: position{line: 51, col: 15, offset: 915},
				run: (*parser).callonStarItalic1,
				expr: &seqExpr{
					pos: position{line: 51, col: 15, offset: 915},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 51, col: 15, offset: 915},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 51, col: 19, offset: 919},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 24, offset: 924},
								name: "WrappedLine",
							},
						},
						&litMatcher{
							pos:        position{line: 51, col: 36, offset: 936},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "UnderscoreItalic",
			pos:  position{line: 64, col: 1, offset: 1142},
			expr: &actionExpr{
				pos: position{line: 64, col: 21, offset: 1162},
				run: (*parser).callonUnderscoreItalic1,
				expr: &seqExpr{
					pos: position{line: 64, col: 21, offset: 1162},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 64, col: 21, offset: 1162},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 25, offset: 1166},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 30, offset: 1171},
								name: "WrappedLine",
							},
						},
						&litMatcher{
							pos:        position{line: 64, col: 42, offset: 1183},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "StarBold",
			pos:  position{line: 77, col: 1, offset: 1389},
			expr: &actionExpr{
				pos: position{line: 77, col: 13, offset: 1401},
				run: (*parser).callonStarBold1,
				expr: &seqExpr{
					pos: position{line: 77, col: 13, offset: 1401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 77, col: 13, offset: 1401},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 77, col: 18, offset: 1406},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 23, offset: 1411},
								name: "WrappedLine",
							},
						},
						&litMatcher{
							pos:        position{line: 77, col: 35, offset: 1423},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "UnderscoreBold",
			pos:  position{line: 90, col: 1, offset: 1628},
			expr: &actionExpr{
				pos: position{line: 90, col: 19, offset: 1646},
				run: (*parser).callonUnderscoreBold1,
				expr: &seqExpr{
					pos: position{line: 90, col: 19, offset: 1646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 90, col: 19, offset: 1646},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 90, col: 24, offset: 1651},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 29, offset: 1656},
								name: "WrappedLine",
							},
						},
						&litMatcher{
							pos:        position{line: 90, col: 41, offset: 1668},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 103, col: 1, offset: 1873},
			expr: &actionExpr{
				pos: position{line: 103, col: 9, offset: 1881},
				run: (*parser).callonLink1,
				expr: &seqExpr{
					pos: position{line: 103, col: 9, offset: 1881},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 103, col: 9, offset: 1881},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 13, offset: 1885},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 19, offset: 1891},
								name: "WrappedLine",
							},
						},
						&litMatcher{
							pos:        position{line: 103, col: 31, offset: 1903},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&litMatcher{
							pos:        position{line: 103, col: 35, offset: 1907},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 39, offset: 1911},
							label: "destination",
							expr: &oneOrMoreExpr{
								pos: position{line: 103, col: 51, offset: 1923},
								expr: &charClassMatcher{
									pos:        position{line: 103, col: 51, offset: 1923},
									val:        "[^)]",
									chars:      []rune{')'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 103, col: 57, offset: 1929},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Image",
			pos:  position{line: 116, col: 1, offset: 2165},
			expr: &actionExpr{
				pos: position{line: 116, col: 10, offset: 2174},
				run: (*parser).callonImage1,
				expr: &seqExpr{
					pos: position{line: 116, col: 10, offset: 2174},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 116, col: 10, offset: 2174},
							val:        "![",
							ignoreCase: false,
							want:       "\"![\"",
						},
						&labeledExpr{
							pos:   position{line: 116, col: 15, offset: 2179},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 116, col: 21, offset: 2185},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 21, offset: 2185},
									name: "WrappedLine",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 34, offset: 2198},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&litMatcher{
							pos:        position{line: 116, col: 38, offset: 2202},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 116, col: 42, offset: 2206},
							label: "destination",
							expr: &oneOrMoreExpr{
								pos: position{line: 116, col: 54, offset: 2218},
								expr: &charClassMatcher{
									pos:        position{line: 116, col: 54, offset: 2218},
									val:        "[^)]",
									chars:      []rune{')'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 60, offset: 2224},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraphs",
			pos:  position{line: 137, col: 1, offset: 2535},
			expr: &actionExpr{
				pos: position{line: 137, col: 15, offset: 2549},
				run: (*parser).callonParagraphs1,
				expr: &seqExpr{
					pos: position{line: 137, col: 15, offset: 2549},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 15, offset: 2549},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 15, offset: 2549},
								name: "CommentSpacing",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 31, offset: 2565},
							label: "paragraphs",
							expr: &oneOrMoreExpr{
								pos: position{line: 137, col: 42, offset: 2576},
								expr: &actionExpr{
									pos: position{line: 137, col: 43, offset: 2577},
									run: (*parser).callonParagraphs7,
									expr: &seqExpr{
										pos: position{line: 137, col: 43, offset: 2577},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 137, col: 43, offset: 2577},
												label: "p",
												expr: &choiceExpr{
													pos: position{line: 137, col: 46, offset: 2580},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 137, col: 46, offset: 2580},
															name: "Header",
														},
														&ruleRefExpr{
															pos:  position{line: 137, col: 55, offset: 2589},
															name: "Quote",
														},
														&ruleRefExpr{
															pos:  position{line: 137, col: 63, offset: 2597},
															name: "List",
														},
														&ruleRefExpr{
															pos:  position{line: 137, col: 70, offset: 2604},
															name: "Paragraph",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 137, col: 81, offset: 2615},
												expr: &ruleRefExpr{
													pos:  position{line: 137, col: 81, offset: 2615},
													name: "CommentSpacing",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 141, col: 1, offset: 2703},
			expr: &choiceExpr{
				pos: position{line: 141, col: 14, offset: 2716},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 141, col: 14, offset: 2716},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 141, col: 21, offset: 2723},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
				},
			},
		},
		{
			name: "CommentSpacing",
			pos:  position{line: 143, col: 1, offset: 2731},
			expr: &choiceExpr{
				pos: position{line: 143, col: 19, offset: 2749},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 143, col: 19, offset: 2749},
						name: "LineBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 143, col: 31, offset: 2761},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 145, col: 1, offset: 2770},
			expr: &actionExpr{
				pos: position{line: 145, col: 14, offset: 2783},
				run: (*parser).callonParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 145, col: 14, offset: 2783},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 145, col: 20, offset: 2789},
						expr: &actionExpr{
							pos: position{line: 145, col: 21, offset: 2790},
							run: (*parser).callonParagraph4,
							expr: &seqExpr{
								pos: position{line: 145, col: 21, offset: 2790},
								exprs: []interface{}{
									&labeledExpr{
										pos:   position{line: 145, col: 21, offset: 2790},
										label: "l",
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 23, offset: 2792},
											name: "Line",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 145, col: 28, offset: 2797},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 28, offset: 2797},
											name: "LineBreak",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedParagraph",
			pos:  position{line: 149, col: 1, offset: 2880},
			expr: &actionExpr{
				pos: position{line: 149, col: 20, offset: 2899},
				run: (*parser).callonQuotedParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 149, col: 20, offset: 2899},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 149, col: 26, offset: 2905},
						expr: &actionExpr{
							pos: position{line: 149, col: 27, offset: 2906},
							run: (*parser).callonQuotedParagraph4,
							expr: &seqExpr{
								pos: position{line: 149, col: 27, offset: 2906},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 149, col: 27, offset: 2906},
										name: "WS",
									},
									&litMatcher{
										pos:        position{line: 149, col: 30, offset: 2909},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
									&labeledExpr{
										pos:   position{line: 149, col: 34, offset: 2913},
										label: "l",
										expr: &ruleRefExpr{
											pos:  position{line: 149, col: 36, offset: 2915},
											name: "Line",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 149, col: 41, offset: 2920},
										expr: &ruleRefExpr{
											pos:  position{line: 149, col: 41, offset: 2920},
											name: "LineBreak",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 153, col: 1, offset: 3003},
			expr: &actionExpr{
				pos: position{line: 153, col: 10, offset: 3012},
				run: (*parser).callonQuote1,
				expr: &labeledExpr{
					pos:   position{line: 153, col: 10, offset: 3012},
					label: "paras",
					expr: &oneOrMoreExpr{
						pos: position{line: 153, col: 16, offset: 3018},
						expr: &actionExpr{
							pos: position{line: 153, col: 17, offset: 3019},
							run: (*parser).callonQuote4,
							expr: &seqExpr{
								pos: position{line: 153, col: 17, offset: 3019},
								exprs: []interface{}{
									&labeledExpr{
										pos:   position{line: 153, col: 17, offset: 3019},
										label: "p",
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 19, offset: 3021},
											name: "QuotedParagraph",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 153, col: 35, offset: 3037},
										expr: &seqExpr{
											pos: position{line: 153, col: 36, offset: 3038},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 153, col: 36, offset: 3038},
													name: "WS",
												},
												&litMatcher{
													pos:        position{line: 153, col: 39, offset: 3041},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&ruleRefExpr{
													pos:  position{line: 153, col: 43, offset: 3045},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 153, col: 46, offset: 3048},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndentedParagraph",
			pos:  position{line: 165, col: 1, offset: 3296},
			expr: &actionExpr{
				pos: position{line: 165, col: 22, offset: 3317},
				run: (*parser).callonIndentedParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 165, col: 22, offset: 3317},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 165, col: 28, offset: 3323},
						expr: &actionExpr{
							pos: position{line: 165, col: 29, offset: 3324},
							run: (*parser).callonIndentedParagraph4,
							expr: &seqExpr{
								pos: position{line: 165, col: 29, offset: 3324},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 165, col: 29, offset: 3324},
										val:        "  ",
										ignoreCase: false,
										want:       "\"  \"",
									},
									&labeledExpr{
										pos:   position{line: 165, col: 34, offset: 3329},
										label: "l",
										expr: &ruleRefExpr{
											pos:  position{line: 165, col: 36, offset: 3331},
											name: "Line",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 165, col: 41, offset: 3336},
										expr: &ruleRefExpr{
											pos:  position{line: 165, col: 41, offset: 3336},
											name: "LineBreak",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Indented",
			pos:  position{line: 169, col: 1, offset: 3419},
			expr: &actionExpr{
				pos: position{line: 169, col: 13, offset: 3431},
				run: (*parser).callonIndented1,
				expr: &labeledExpr{
					pos:   position{line: 169, col: 13, offset: 3431},
					label: "paras",
					expr: &oneOrMoreExpr{
						pos: position{line: 169, col: 19, offset: 3437},
						expr: &actionExpr{
							pos: position{line: 169, col: 20, offset: 3438},
							run: (*parser).callonIndented4,
							expr: &seqExpr{
								pos: position{line: 169, col: 20, offset: 3438},
								exprs: []interface{}{
									&labeledExpr{
										pos:   position{line: 169, col: 20, offset: 3438},
										label: "p",
										expr: &ruleRefExpr{
											pos:  position{line: 169, col: 22, offset: 3440},
											name: "IndentedParagraph",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 169, col: 40, offset: 3458},
										name: "WS",
									},
									&zeroOrOneExpr{
										pos: position{line: 169, col: 43, offset: 3461},
										expr: &ruleRefExpr{
											pos:  position{line: 169, col: 43, offset: 3461},
											name: "LineBreak",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StarTightList",
			pos:  position{line: 173, col: 1, offset: 3539},
			expr: &actionExpr{
				pos: position{line: 173, col: 18, offset: 3556},
				run: (*parser).callonStarTightList1,
				expr: &seqExpr{
					pos: position{line: 173, col: 18, offset: 3556},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 173, col: 18, offset: 3556},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 21, offset: 3559},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 173, col: 27, offset: 3565},
								expr: &actionExpr{
									pos: position{line: 173, col: 28, offset: 3566},
									run: (*parser).callonStarTightList6,
									expr: &seqExpr{
										pos: position{line: 173, col: 28, offset: 3566},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 28, offset: 3566},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&labeledExpr{
												pos:   position{line: 173, col: 32, offset: 3570},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 173, col: 34, offset: 3572},
													name: "Line",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 173, col: 39, offset: 3577},
												expr: &ruleRefExpr{
													pos:  position{line: 173, col: 39, offset: 3577},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StarLooseListItem",
			pos:  position{line: 185, col: 1, offset: 3805},
			expr: &actionExpr{
				pos: position{line: 185, col: 22, offset: 3826},
				run: (*parser).callonStarLooseListItem1,
				expr: &seqExpr{
					pos: position{line: 185, col: 22, offset: 3826},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 22, offset: 3826},
							val:        "* ",
							ignoreCase: false,
							want:       "\"* \"",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 27, offset: 3831},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 29, offset: 3833},
								name: "Line",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 185, col: 34, offset: 3838},
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 34, offset: 3838},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 45, offset: 3849},
							label: "ls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 48, offset: 3852},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 48, offset: 3852},
									name: "Indented",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StarLooseList",
			pos:  position{line: 190, col: 1, offset: 3941},
			expr: &actionExpr{
				pos: position{line: 190, col: 18, offset: 3958},
				run: (*parser).callonStarLooseList1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 18, offset: 3958},
					label: "items",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 24, offset: 3964},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 24, offset: 3964},
							name: "StarLooseListItem",
						},
					},
				},
			},
		},
		{
			name: "DashTightList",
			pos:  position{line: 202, col: 1, offset: 4180},
			expr: &actionExpr{
				pos: position{line: 202, col: 18, offset: 4197},
				run: (*parser).callonDashTightList1,
				expr: &seqExpr{
					pos: position{line: 202, col: 18, offset: 4197},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 202, col: 18, offset: 4197},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 21, offset: 4200},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 202, col: 27, offset: 4206},
								expr: &actionExpr{
									pos: position{line: 202, col: 28, offset: 4207},
									run: (*parser).callonDashTightList6,
									expr: &seqExpr{
										pos: position{line: 202, col: 28, offset: 4207},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 202, col: 28, offset: 4207},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
											&labeledExpr{
												pos:   position{line: 202, col: 32, offset: 4211},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 202, col: 34, offset: 4213},
													name: "Line",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 202, col: 39, offset: 4218},
												expr: &ruleRefExpr{
													pos:  position{line: 202, col: 39, offset: 4218},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DashLooseListItem",
			pos:  position{line: 214, col: 1, offset: 4446},
			expr: &actionExpr{
				pos: position{line: 214, col: 22, offset: 4467},
				run: (*parser).callonDashLooseListItem1,
				expr: &seqExpr{
					pos: position{line: 214, col: 22, offset: 4467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 22, offset: 4467},
							val:        "- ",
							ignoreCase: false,
							want:       "\"- \"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 27, offset: 4472},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 29, offset: 4474},
								name: "Line",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 34, offset: 4479},
							name: "LineBreak",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 44, offset: 4489},
							label: "ls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 214, col: 47, offset: 4492},
								expr: &ruleRefExpr{
									pos:  position{line: 214, col: 47, offset: 4492},
									name: "Indented",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DashLooseList",
			pos:  position{line: 219, col: 1, offset: 4581},
			expr: &actionExpr{
				pos: position{line: 219, col: 18, offset: 4598},
				run: (*parser).callonDashLooseList1,
				expr: &labeledExpr{
					pos:   position{line: 219, col: 18, offset: 4598},
					label: "items",
					expr: &oneOrMoreExpr{
						pos: position{line: 219, col: 24, offset: 4604},
						expr: &ruleRefExpr{
							pos:  position{line: 219, col: 24, offset: 4604},
							name: "DashLooseListItem",
						},
					},
				},
			},
		},
		{
			name: "StarList",
			pos:  position{line: 231, col: 1, offset: 4820},
			expr: &choiceExpr{
				pos: position{line: 231, col: 13, offset: 4832},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 231, col: 13, offset: 4832},
						name: "StarLooseList",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 29, offset: 4848},
						name: "StarTightList",
					},
				},
			},
		},
		{
			name: "DashList",
			pos:  position{line: 232, col: 1, offset: 4862},
			expr: &choiceExpr{
				pos: position{line: 232, col: 13, offset: 4874},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 232, col: 13, offset: 4874},
						name: "DashLooseList",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 29, offset: 4890},
						name: "DashTightList",
					},
				},
			},
		},
		{
			name: "List",
			pos:  position{line: 233, col: 1, offset: 4904},
			expr: &choiceExpr{
				pos: position{line: 233, col: 9, offset: 4912},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 233, col: 9, offset: 4912},
						name: "StarList",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 20, offset: 4923},
						name: "DashList",
					},
				},
			},
		},
		{
			name: "Sentence",
			pos:  position{line: 235, col: 1, offset: 4933},
			expr: &actionExpr{
				pos: position{line: 235, col: 13, offset: 4945},
				run: (*parser).callonSentence1,
				expr: &labeledExpr{
					pos:   position{line: 235, col: 13, offset: 4945},
					label: "words",
					expr: &oneOrMoreExpr{
						pos: position{line: 235, col: 19, offset: 4951},
						expr: &ruleRefExpr{
							pos:  position{line: 235, col: 20, offset: 4952},
							name: "Word",
						},
					},
				},
			},
		},
		{
			name: "Line",
			pos:  position{line: 239, col: 1, offset: 5006},
			expr: &actionExpr{
				pos: position{line: 239, col: 9, offset: 5014},
				run: (*parser).callonLine1,
				expr: &seqExpr{
					pos: position{line: 239, col: 9, offset: 5014},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 239, col: 9, offset: 5014},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 12, offset: 5017},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 17, offset: 5022},
								name: "Sentence",
							},
						},
					},
				},
			},
		},
		{
			name: "Header",
			pos:  position{line: 241, col: 1, offset: 5053},
			expr: &actionExpr{
				pos: position{line: 241, col: 11, offset: 5063},
				run: (*parser).callonHeader1,
				expr: &seqExpr{
					pos: position{line: 241, col: 11, offset: 5063},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 241, col: 11, offset: 5063},
							label: "depth",
							expr: &oneOrMoreExpr{
								pos: position{line: 241, col: 17, offset: 5069},
								expr: &litMatcher{
									pos:        position{line: 241, col: 17, offset: 5069},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 22, offset: 5074},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 27, offset: 5079},
								name: "Line",
							},
						},
					},
				},
			},
		},
		{
			name: "Flow",
			pos:  position{line: 255, col: 1, offset: 5351},
			expr: &choiceExpr{
				pos: position{line: 255, col: 9, offset: 5359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 255, col: 9, offset: 5359},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 18, offset: 5368},
						name: "Invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 27, offset: 5377},
						name: "Image",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 35, offset: 5385},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 42, offset: 5392},
						name: "InlineCode",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 55, offset: 5405},
						name: "StarBold",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 66, offset: 5416},
						name: "UnderscoreBold",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 83, offset: 5433},
						name: "StarItalic",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 96, offset: 5446},
						name: "UnderscoreItalic",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 115, offset: 5465},
						name: "Interpolated",
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 257, col: 1, offset: 5479},
			expr: &actionExpr{
				pos: position{line: 257, col: 9, offset: 5487},
				run: (*parser).callonWord1,
				expr: &seqExpr{
					pos: position{line: 257, col: 9, offset: 5487},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 257, col: 9, offset: 5487},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 9, offset: 5487},
								name: "Comment",
							},
						},
						&labeledExpr{
							pos:   position{line: 257, col: 18, offset: 5496},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 22, offset: 5500},
								name: "Flow",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 257, col: 27, offset: 5505},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 27, offset: 5505},
								name: "Comment",
							},
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 261, col: 1, offset: 5537},
			expr: &seqExpr{
				pos: position{line: 261, col: 12, offset: 5548},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 261, col: 12, offset: 5548},
						name: "WS",
					},
					&litMatcher{
						pos:        position{line: 261, col: 15, offset: 5551},
						val:        "{-",
						ignoreCase: false,
						want:       "\"{-\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 261, col: 20, offset: 5556},
						expr: &choiceExpr{
							pos: position{line: 261, col: 21, offset: 5557},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 261, col: 21, offset: 5557},
									name: "Comment",
								},
								&seqExpr{
									pos: position{line: 261, col: 31, offset: 5567},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 261, col: 31, offset: 5567},
											expr: &litMatcher{
												pos:        position{line: 261, col: 32, offset: 5568},
												val:        "-}",
												ignoreCase: false,
												want:       "\"-}\"",
											},
										},
										&anyMatcher{
											line: 261, col: 37, offset: 5573,
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 261, col: 41, offset: 5577},
						val:        "-}",
						ignoreCase: false,
						want:       "\"-}\"",
					},
				},
			},
		},
		{
			name: "Interpolated",
			pos:  position{line: 263, col: 1, offset: 5583},
			expr: &actionExpr{
				pos: position{line: 263, col: 17, offset: 5599},
				run: (*parser).callonInterpolated1,
				expr: &seqExpr{
					pos: position{line: 263, col: 17, offset: 5599},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 17, offset: 5599},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 21, offset: 5603},
							label: "word",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 26, offset: 5608},
								expr: &ruleRefExpr{
									pos:  position{line: 263, col: 26, offset: 5608},
									name: "Word",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 32, offset: 5614},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "WrappedLine",
			pos:  position{line: 271, col: 1, offset: 5705},
			expr: &actionExpr{
				pos: position{line: 271, col: 16, offset: 5720},
				run: (*parser).callonWrappedLine1,
				expr: &seqExpr{
					pos: position{line: 271, col: 16, offset: 5720},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 16, offset: 5720},
							label: "firstWord",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 26, offset: 5730},
								name: "Word",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 31, offset: 5735},
							label: "words",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 37, offset: 5741},
								expr: &choiceExpr{
									pos: position{line: 271, col: 38, offset: 5742},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 38, offset: 5742},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 45, offset: 5749},
											name: "Split",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Split",
			pos:  position{line: 276, col: 1, offset: 5880},
			expr: &actionExpr{
				pos: position{line: 276, col: 10, offset: 5889},
				run: (*parser).callonSplit1,
				expr: &seqExpr{
					pos: position{line: 276, col: 10, offset: 5889},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 276, col: 10, offset: 5889},
							name: "LineBreak",
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 20, offset: 5899},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 278, col: 1, offset: 5931},
			expr: &choiceExpr{
				pos: position{line: 278, col: 11, offset: 5941},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 278, col: 11, offset: 5941},
						run: (*parser).callonString2,
						expr: &choiceExpr{
							pos: position{line: 278, col: 12, offset: 5942},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 278, col: 12, offset: 5942},
									expr: &charClassMatcher{
										pos:        position{line: 278, col: 12, offset: 5942},
										val:        "[^\\\\{}*_`[\\]!\\r\\n]",
										chars:      []rune{'\\', '{', '}', '*', '_', '`', '[', ']', '!', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&seqExpr{
									pos: position{line: 278, col: 34, offset: 5964},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 278, col: 34, offset: 5964},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
										&notExpr{
											pos: position{line: 278, col: 38, offset: 5968},
											expr: &litMatcher{
												pos:        position{line: 278, col: 39, offset: 5969},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 278, col: 77, offset: 6007},
						run: (*parser).callonString10,
						expr: &seqExpr{
							pos: position{line: 278, col: 77, offset: 6007},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 77, offset: 6007},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&charClassMatcher{
									pos:        position{line: 278, col: 82, offset: 6012},
									val:        "[\\\\{}*_`[\\]!]",
									chars:      []rune{'\\', '{', '}', '*', '_', '`', '[', ']', '!'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimString",
			pos:  position{line: 280, col: 1, offset: 6062},
			expr: &choiceExpr{
				pos: position{line: 280, col: 19, offset: 6080},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 280, col: 19, offset: 6080},
						run: (*parser).callonVerbatimString2,
						expr: &labeledExpr{
							pos:   position{line: 280, col: 19, offset: 6080},
							label: "str",
							expr: &oneOrMoreExpr{
								pos: position{line: 280, col: 23, offset: 6084},
								expr: &charClassMatcher{
									pos:        position{line: 280, col: 23, offset: 6084},
									val:        "[^\\r\\n}]",
									chars:      []rune{'\r', '\n', '}'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 282, col: 5, offset: 6129},
						run: (*parser).callonVerbatimString6,
						expr: &seqExpr{
							pos: position{line: 282, col: 5, offset: 6129},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 282, col: 5, offset: 6129},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&notExpr{
									pos: position{line: 282, col: 9, offset: 6133},
									expr: &litMatcher{
										pos:        position{line: 282, col: 10, offset: 6134},
										val:        "}}",
										ignoreCase: false,
										want:       "\"}}\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PreformattedLine",
			pos:  position{line: 286, col: 1, offset: 6173},
			expr: &actionExpr{
				pos: position{line: 286, col: 21, offset: 6193},
				run: (*parser).callonPreformattedLine1,
				expr: &seqExpr{
					pos: position{line: 286, col: 21, offset: 6193},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 286, col: 21, offset: 6193},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 28, offset: 6200},
								name: "Indent",
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 35, offset: 6207},
							label: "words",
							expr: &zeroOrMoreExpr{
								pos: position{line: 286, col: 41, offset: 6213},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 41, offset: 6213},
									name: "Word",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 47, offset: 6219},
							name: "LineBreak",
						},
					},
				},
			},
		},
		{
			name: "Preformatted",
			pos:  position{line: 292, col: 1, offset: 6349},
			expr: &actionExpr{
				pos: position{line: 292, col: 17, offset: 6365},
				run: (*parser).callonPreformatted1,
				expr: &seqExpr{
					pos: position{line: 292, col: 17, offset: 6365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 292, col: 17, offset: 6365},
							name: "LineBreak",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 27, offset: 6375},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 33, offset: 6381},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 33, offset: 6381},
									name: "PreformattedLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 297, col: 1, offset: 6493},
			expr: &actionExpr{
				pos: position{line: 297, col: 17, offset: 6509},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 297, col: 17, offset: 6509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 297, col: 17, offset: 6509},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 24, offset: 6516},
								name: "Indent",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 31, offset: 6523},
							label: "words",
							expr: &zeroOrMoreExpr{
								pos: position{line: 297, col: 37, offset: 6529},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 37, offset: 6529},
									name: "VerbatimString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 53, offset: 6545},
							name: "LineBreak",
						},
					},
				},
			},
		},
		{
			name: "Verbatim",
			pos:  position{line: 303, col: 1, offset: 6675},
			expr: &actionExpr{
				pos: position{line: 303, col: 13, offset: 6687},
				run: (*parser).callonVerbatim1,
				expr: &seqExpr{
					pos: position{line: 303, col: 13, offset: 6687},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 303, col: 13, offset: 6687},
							name: "LineBreak",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 23, offset: 6697},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 303, col: 29, offset: 6703},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 29, offset: 6703},
									name: "VerbatimLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Invoke",
			pos:  position{line: 308, col: 1, offset: 6811},
			expr: &actionExpr{
				pos: position{line: 308, col: 11, offset: 6821},
				run: (*parser).callonInvoke1,
				expr: &seqExpr{
					pos: position{line: 308, col: 11, offset: 6821},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 308, col: 11, offset: 6821},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 308, col: 16, offset: 6826},
							label: "name",
							expr: &oneOrMoreExpr{
								pos: position{line: 308, col: 22, offset: 6832},
								expr: &charClassMatcher{
									pos:        position{line: 308, col: 22, offset: 6832},
									val:        "[a-z-]",
									chars:      []rune{'-'},
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 31, offset: 6841},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 308, col: 37, offset: 6847},
								expr: &ruleRefExpr{
									pos:  position{line: 308, col: 37, offset: 6847},
									name: "Argument",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimArg",
			pos:  position{line: 321, col: 1, offset: 7063},
			expr: &actionExpr{
				pos: position{line: 321, col: 16, offset: 7078},
				run: (*parser).callonVerbatimArg1,
				expr: &seqExpr{
					pos: position{line: 321, col: 16, offset: 7078},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 321, col: 16, offset: 7078},
							val:        "{{{",
							ignoreCase: false,
							want:       "\"{{{\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 22, offset: 7084},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 27, offset: 7089},
								name: "Verbatim",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 36, offset: 7098},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 321, col: 39, offset: 7101},
							val:        "}}}",
							ignoreCase: false,
							want:       "\"}}}\"",
						},
					},
				},
			},
		},
		{
			name: "PreformattedArg",
			pos:  position{line: 325, col: 1, offset: 7131},
			expr: &actionExpr{
				pos: position{line: 325, col: 20, offset: 7150},
				run: (*parser).callonPreformattedArg1,
				expr: &seqExpr{
					pos: position{line: 325, col: 20, offset: 7150},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 20, offset: 7150},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 25, offset: 7155},
							label: "node",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 30, offset: 7160},
								name: "Preformatted",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 43, offset: 7173},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 325, col: 46, offset: 7176},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
		},
		{
			name: "EmptyArg",
			pos:  position{line: 329, col: 1, offset: 7205},
			expr: &actionExpr{
				pos: position{line: 329, col: 13, offset: 7217},
				run: (*parser).callonEmptyArg1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 329, col: 13, offset: 7217},
					expr: &ruleRefExpr{
						pos:  position{line: 329, col: 13, offset: 7217},
						name: "CommentSpacing",
					},
				},
			},
		},
		{
			name: "Arg",
			pos:  position{line: 331, col: 1, offset: 7254},
			expr: &actionExpr{
				pos: position{line: 331, col: 8, offset: 7261},
				run: (*parser).callonArg1,
				expr: &seqExpr{
					pos: position{line: 331, col: 8, offset: 7261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 8, offset: 7261},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 12, offset: 7265},
							label: "node",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 17, offset: 7270},
								expr: &choiceExpr{
									pos: position{line: 331, col: 18, offset: 7271},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 331, col: 18, offset: 7271},
											name: "WrappedLine",
										},
										&ruleRefExpr{
											pos:  position{line: 331, col: 32, offset: 7285},
											name: "ParaArg",
										},
										&ruleRefExpr{
											pos:  position{line: 331, col: 42, offset: 7295},
											name: "EmptyArg",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 331, col: 53, offset: 7306},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ParaArg",
			pos:  position{line: 339, col: 1, offset: 7397},
			expr: &actionExpr{
				pos: position{line: 339, col: 12, offset: 7408},
				run: (*parser).callonParaArg1,
				expr: &seqExpr{
					pos: position{line: 339, col: 12, offset: 7408},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 339, col: 12, offset: 7408},
							label: "paras",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 18, offset: 7414},
								name: "Paragraphs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 339, col: 29, offset: 7425},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Argument",
			pos:  position{line: 343, col: 1, offset: 7453},
			expr: &choiceExpr{
				pos: position{line: 343, col: 13, offset: 7465},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 343, col: 13, offset: 7465},
						name: "VerbatimArg",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 27, offset: 7479},
						name: "PreformattedArg",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 45, offset: 7497},
						name: "Arg",
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 345, col: 1, offset: 7502},
			expr: &actionExpr{
				pos: position{line: 345, col: 11, offset: 7512},
				run: (*parser).callonIndent1,
				expr: &ruleRefExpr{
					pos:  position{line: 345, col: 11, offset: 7512},
					name: "WS",
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 362, col: 1, offset: 7773},
			expr: &zeroOrMoreExpr{
				pos: position{line: 362, col: 7, offset: 7779},
				expr: &charClassMatcher{
					pos:        position{line: 362, col: 7, offset: 7779},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
	},
}

func (c *current) onBooklit1(node interface{}) (interface{}, error) {
	return node, nil
}

func (p *parser) callonBooklit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooklit1(stack["node"])
}

func (c *current) onInlineCode5() (interface{}, error) {
	return String(c.text), nil
}

func (p *parser) callonInlineCode5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineCode5()
}

func (c *current) onInlineCode1(node interface{}) (interface{}, error) {
	return Invoke{
		Function:  "code",
		Arguments: []Node{node.(Node)},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonInlineCode1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineCode1(stack["node"])
}

func (c *current) onStarItalic1(node interface{}) (interface{}, error) {
	return Invoke{
		Function:  "italic",
		Arguments: []Node{node.(Node)},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonStarItalic1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStarItalic1(stack["node"])
}

func (c *current) onUnderscoreItalic1(node interface{}) (interface{}, error) {
	return Invoke{
		Function:  "italic",
		Arguments: []Node{node.(Node)},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonUnderscoreItalic1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnderscoreItalic1(stack["node"])
}

func (c *current) onStarBold1(node interface{}) (interface{}, error) {
	return Invoke{
		Function:  "bold",
		Arguments: []Node{node.(Node)},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonStarBold1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStarBold1(stack["node"])
}

func (c *current) onUnderscoreBold1(node interface{}) (interface{}, error) {
	return Invoke{
		Function:  "bold",
		Arguments: []Node{node.(Node)},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonUnderscoreBold1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnderscoreBold1(stack["node"])
}

func (c *current) onLink1(title, destination interface{}) (interface{}, error) {
	return Invoke{
		Function:  "link",
		Arguments: []Node{title.(Node), String(ifaceStr(destination))},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["title"], stack["destination"])
}

func (c *current) onImage1(title, destination interface{}) (interface{}, error) {
	args := []Node{
		String(ifaceStr(destination)),
	}

	if title != nil {
		args = append(args, title.(Node))
	}

	return Invoke{
		Function:  "image",
		Arguments: args,

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImage1(stack["title"], stack["destination"])
}

func (c *current) onParagraphs7(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonParagraphs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphs7(stack["p"])
}

func (c *current) onParagraphs1(paragraphs interface{}) (interface{}, error) {
	return Sequence(ifaceNodes(paragraphs)), nil
}

func (p *parser) callonParagraphs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphs1(stack["paragraphs"])
}

func (c *current) onParagraph4(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph4(stack["l"])
}

func (c *current) onParagraph1(lines interface{}) (interface{}, error) {
	return Paragraph(ifaceSequences(lines)), nil
}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["lines"])
}

func (c *current) onQuotedParagraph4(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonQuotedParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedParagraph4(stack["l"])
}

func (c *current) onQuotedParagraph1(lines interface{}) (interface{}, error) {
	return Paragraph(ifaceSequences(lines)), nil
}

func (p *parser) callonQuotedParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedParagraph1(stack["lines"])
}

func (c *current) onQuote4(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonQuote4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote4(stack["p"])
}

func (c *current) onQuote1(paras interface{}) (interface{}, error) {
	return Invoke{
		Function:  "quote",
		Arguments: []Node{Sequence(ifaceNodes(paras))},
		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["paras"])
}

func (c *current) onIndentedParagraph4(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonIndentedParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndentedParagraph4(stack["l"])
}

func (c *current) onIndentedParagraph1(lines interface{}) (interface{}, error) {
	return Paragraph(ifaceSequences(lines)), nil
}

func (p *parser) callonIndentedParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndentedParagraph1(stack["lines"])
}

func (c *current) onIndented4(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonIndented4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndented4(stack["p"])
}

func (c *current) onIndented1(paras interface{}) (interface{}, error) {
	return Sequence(ifaceNodes(paras)), nil
}

func (p *parser) callonIndented1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndented1(stack["paras"])
}

func (c *current) onStarTightList6(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonStarTightList6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStarTightList6(stack["l"])
}

func (c *current) onStarTightList1(lines interface{}) (interface{}, error) {
	return Invoke{
		Function:  "list",
		Arguments: ifaceNodes(lines),
		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonStarTightList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStarTightList1(stack["lines"])
}

func (c *current) onStarLooseListItem1(l, ls interface{}) (interface{}, error) {
	// TODO get l back in there
	return Paragraph(ifaceSequences(ls)), nil
}

func (p *parser) callonStarLooseListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStarLooseListItem1(stack["l"], stack["ls"])
}

func (c *current) onStarLooseList1(items interface{}) (interface{}, error) {
	return Invoke{
		Function:  "list",
		Arguments: ifaceNodes(items),
		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonStarLooseList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStarLooseList1(stack["items"])
}

func (c *current) onDashTightList6(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonDashTightList6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDashTightList6(stack["l"])
}

func (c *current) onDashTightList1(lines interface{}) (interface{}, error) {
	return Invoke{
		Function:  "list",
		Arguments: ifaceNodes(lines),
		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonDashTightList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDashTightList1(stack["lines"])
}

func (c *current) onDashLooseListItem1(l, ls interface{}) (interface{}, error) {
	// TODO get l back in there
	return Paragraph(ifaceSequences(ls)), nil
}

func (p *parser) callonDashLooseListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDashLooseListItem1(stack["l"], stack["ls"])
}

func (c *current) onDashLooseList1(items interface{}) (interface{}, error) {
	return Invoke{
		Function:  "list",
		Arguments: ifaceNodes(items),
		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonDashLooseList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDashLooseList1(stack["items"])
}

func (c *current) onSentence1(words interface{}) (interface{}, error) {
	return Sequence(ifaceNodes(words)), nil
}

func (p *parser) callonSentence1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSentence1(stack["words"])
}

func (c *current) onLine1(node interface{}) (interface{}, error) {
	return node, nil
}

func (p *parser) callonLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLine1(stack["node"])
}

func (c *current) onHeader1(depth, line interface{}) (interface{}, error) {
	sub := strings.Repeat("sub", len(depth.([]interface{}))-1)
	return Invoke{
		Function:  sub + "header",
		Arguments: []Node{line.(Node)},

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader1(stack["depth"], stack["line"])
}

func (c *current) onWord1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord1(stack["val"])
}

func (c *current) onInterpolated1(word interface{}) (interface{}, error) {
	if word == nil {
		return Sequence{}, nil
	} else {
		return word, nil
	}
}

func (p *parser) callonInterpolated1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolated1(stack["word"])
}

func (c *current) onWrappedLine1(firstWord, words interface{}) (interface{}, error) {
	allWords := append([]interface{}{firstWord}, words.([]interface{})...)
	return Sequence(ifaceNodes(allWords)), nil
}

func (p *parser) callonWrappedLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWrappedLine1(stack["firstWord"], stack["words"])
}

func (c *current) onSplit1() (interface{}, error) {
	return String(" "), nil
}

func (p *parser) callonSplit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplit1()
}

func (c *current) onString2() (interface{}, error) {
	return String(c.text), nil
}

func (p *parser) callonString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString2()
}

func (c *current) onString10() (interface{}, error) {
	return String(c.text[1:]), nil
}

func (p *parser) callonString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString10()
}

func (c *current) onVerbatimString2(str interface{}) (interface{}, error) {
	return String(c.text), nil
}

func (p *parser) callonVerbatimString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimString2(stack["str"])
}

func (c *current) onVerbatimString6() (interface{}, error) {
	return String(c.text), nil
}

func (p *parser) callonVerbatimString6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimString6()
}

func (c *current) onPreformattedLine1(indent, words interface{}) (interface{}, error) {
	line := []Node{String(indent.(string))}
	line = append(line, ifaceNodes(words)...)
	return Sequence(line), nil
}

func (p *parser) callonPreformattedLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreformattedLine1(stack["indent"], stack["words"])
}

func (c *current) onPreformatted1(lines interface{}) (interface{}, error) {
	delete(c.globalStore, "indent-skip")
	return Preformatted(ifaceSequences(lines)), nil
}

func (p *parser) callonPreformatted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreformatted1(stack["lines"])
}

func (c *current) onVerbatimLine1(indent, words interface{}) (interface{}, error) {
	line := []Node{String(indent.(string))}
	line = append(line, ifaceNodes(words)...)
	return Sequence(line), nil
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["indent"], stack["words"])
}

func (c *current) onVerbatim1(lines interface{}) (interface{}, error) {
	delete(c.globalStore, "indent-skip")
	return Preformatted(ifaceSequences(lines)), nil
}

func (p *parser) callonVerbatim1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatim1(stack["lines"])
}

func (c *current) onInvoke1(name, args interface{}) (interface{}, error) {
	return Invoke{
		Function:  ifaceStr(name),
		Arguments: ifaceNodes(args),

		Location: Location{
			Line:   c.pos.line,
			Col:    c.pos.col,
			Offset: c.pos.offset,
		},
	}, nil
}

func (p *parser) callonInvoke1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInvoke1(stack["name"], stack["args"])
}

func (c *current) onVerbatimArg1(node interface{}) (interface{}, error) {
	return node, nil
}

func (p *parser) callonVerbatimArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimArg1(stack["node"])
}

func (c *current) onPreformattedArg1(node interface{}) (interface{}, error) {
	return node, nil
}

func (p *parser) callonPreformattedArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreformattedArg1(stack["node"])
}

func (c *current) onEmptyArg1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEmptyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyArg1()
}

func (c *current) onArg1(node interface{}) (interface{}, error) {
	if node == nil {
		return String(""), nil
	} else {
		return node, nil
	}
}

func (p *parser) callonArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArg1(stack["node"])
}

func (c *current) onParaArg1(paras interface{}) (interface{}, error) {
	return paras, nil
}

func (p *parser) callonParaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParaArg1(stack["paras"])
}

func (c *current) onIndent1() (interface{}, error) {
	skip := len(c.text)

	i, found := c.globalStore["indent-skip"]
	if found {
		skip = i.(int)
	} else {
		c.globalStore["indent-skip"] = skip
	}

	if skip <= len(c.text) {
		return string(c.text[skip:]), nil
	} else {
		return "", nil
	}
}

func (p *parser) callonIndent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
